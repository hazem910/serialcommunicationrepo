
uarttest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000564  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000333b  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f88  00000000  00000000  00003bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b51  00000000  00000000  00004b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  000066b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001041e  00000000  00000000  00006af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000112b  00000000  00000000  00016f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00018039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000036bd  00000000  00000000  000181f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	00 00       	nop
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	00 00       	nop
   c:	4d c2       	rjmp	.+1178   	; 0x4a8 <__vector_3>
   e:	00 00       	nop
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	00 00       	nop
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	00 00       	nop
  18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	00 00       	nop
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	00 00       	nop
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
  26:	00 00       	nop
  28:	9b c0       	rjmp	.+310    	; 0x160 <__vector_10>
  2a:	00 00       	nop
  2c:	23 c0       	rjmp	.+70     	; 0x74 <__bad_interrupt>
  2e:	00 00       	nop
  30:	21 c0       	rjmp	.+66     	; 0x74 <__bad_interrupt>
  32:	00 00       	nop
  34:	1f c0       	rjmp	.+62     	; 0x74 <__bad_interrupt>
  36:	00 00       	nop
  38:	1d c0       	rjmp	.+58     	; 0x74 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1b c0       	rjmp	.+54     	; 0x74 <__bad_interrupt>
  3e:	00 00       	nop
  40:	19 c0       	rjmp	.+50     	; 0x74 <__bad_interrupt>
  42:	00 00       	nop
  44:	17 c0       	rjmp	.+46     	; 0x74 <__bad_interrupt>
  46:	00 00       	nop
  48:	15 c0       	rjmp	.+42     	; 0x74 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	13 c0       	rjmp	.+38     	; 0x74 <__bad_interrupt>
  4e:	00 00       	nop
  50:	11 c0       	rjmp	.+34     	; 0x74 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	88 d0       	rcall	.+272    	; 0x182 <main>
  72:	76 c2       	rjmp	.+1260   	; 0x560 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <gpioPinDirection>:
	case 2:
			PORTC_DATA ^= (u8_pins);
		break;

	case 3:
			PORTD_DATA ^= (u8_pins);
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <gpioPinDirection+0x26>
  7a:	28 f0       	brcs	.+10     	; 0x86 <gpioPinDirection+0x10>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <gpioPinDirection+0x3c>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <gpioPinDirection+0x52>
  84:	08 95       	ret
  86:	41 11       	cpse	r20, r1
  88:	05 c0       	rjmp	.+10     	; 0x94 <gpioPinDirection+0x1e>
  8a:	8a b3       	in	r24, 0x1a	; 26
  8c:	60 95       	com	r22
  8e:	68 23       	and	r22, r24
  90:	6a bb       	out	0x1a, r22	; 26
  92:	08 95       	ret
  94:	8a b3       	in	r24, 0x1a	; 26
  96:	68 2b       	or	r22, r24
  98:	6a bb       	out	0x1a, r22	; 26
  9a:	08 95       	ret
  9c:	41 11       	cpse	r20, r1
  9e:	05 c0       	rjmp	.+10     	; 0xaa <gpioPinDirection+0x34>
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	60 95       	com	r22
  a4:	68 23       	and	r22, r24
  a6:	67 bb       	out	0x17, r22	; 23
  a8:	08 95       	ret
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	68 2b       	or	r22, r24
  ae:	67 bb       	out	0x17, r22	; 23
  b0:	08 95       	ret
  b2:	41 11       	cpse	r20, r1
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <gpioPinDirection+0x4a>
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	60 95       	com	r22
  ba:	68 23       	and	r22, r24
  bc:	64 bb       	out	0x14, r22	; 20
  be:	08 95       	ret
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	68 2b       	or	r22, r24
  c4:	64 bb       	out	0x14, r22	; 20
  c6:	08 95       	ret
  c8:	41 11       	cpse	r20, r1
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <gpioPinDirection+0x60>
  cc:	81 b3       	in	r24, 0x11	; 17
  ce:	60 95       	com	r22
  d0:	68 23       	and	r22, r24
  d2:	61 bb       	out	0x11, r22	; 17
  d4:	08 95       	ret
  d6:	81 b3       	in	r24, 0x11	; 17
  d8:	68 2b       	or	r22, r24
  da:	61 bb       	out	0x11, r22	; 17
  dc:	08 95       	ret

000000de <gpioPinWrite>:
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	71 f0       	breq	.+28     	; 0xfe <gpioPinWrite+0x20>
  e2:	28 f0       	brcs	.+10     	; 0xee <gpioPinWrite+0x10>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	99 f0       	breq	.+38     	; 0x10e <gpioPinWrite+0x30>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	c9 f0       	breq	.+50     	; 0x11e <gpioPinWrite+0x40>
  ec:	08 95       	ret
  ee:	8b b3       	in	r24, 0x1b	; 27
  f0:	60 95       	com	r22
  f2:	68 23       	and	r22, r24
  f4:	6b bb       	out	0x1b, r22	; 27
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	48 2b       	or	r20, r24
  fa:	4b bb       	out	0x1b, r20	; 27
  fc:	08 95       	ret
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	60 95       	com	r22
 102:	68 23       	and	r22, r24
 104:	68 bb       	out	0x18, r22	; 24
 106:	88 b3       	in	r24, 0x18	; 24
 108:	48 2b       	or	r20, r24
 10a:	48 bb       	out	0x18, r20	; 24
 10c:	08 95       	ret
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	60 95       	com	r22
 112:	68 23       	and	r22, r24
 114:	65 bb       	out	0x15, r22	; 21
 116:	85 b3       	in	r24, 0x15	; 21
 118:	48 2b       	or	r20, r24
 11a:	45 bb       	out	0x15, r20	; 21
 11c:	08 95       	ret
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	60 95       	com	r22
 122:	68 23       	and	r22, r24
 124:	62 bb       	out	0x12, r22	; 18
 126:	82 b3       	in	r24, 0x12	; 18
 128:	48 2b       	or	r20, r24
 12a:	42 bb       	out	0x12, r20	; 18
 12c:	08 95       	ret

0000012e <gpioPinRead>:
}

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t data;
	switch(u8_port)
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	49 f0       	breq	.+18     	; 0x144 <gpioPinRead+0x16>
 132:	28 f0       	brcs	.+10     	; 0x13e <gpioPinRead+0x10>
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	49 f0       	breq	.+18     	; 0x14a <gpioPinRead+0x1c>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	51 f0       	breq	.+20     	; 0x150 <gpioPinRead+0x22>
 13c:	0b c0       	rjmp	.+22     	; 0x154 <gpioPinRead+0x26>
	{
	case 0:
		data= (PORTA_PIN & u8_pin);
 13e:	99 b3       	in	r25, 0x19	; 25
 140:	96 23       	and	r25, r22
		break;
 142:	08 c0       	rjmp	.+16     	; 0x154 <gpioPinRead+0x26>

	case 1:
		data= (PORTB_PIN & u8_pin);
 144:	96 b3       	in	r25, 0x16	; 22
 146:	96 23       	and	r25, r22
		break;
 148:	05 c0       	rjmp	.+10     	; 0x154 <gpioPinRead+0x26>

	case 2:
		data= (PORTC_PIN & u8_pin);
 14a:	93 b3       	in	r25, 0x13	; 19
 14c:	96 23       	and	r25, r22
		break;
 14e:	02 c0       	rjmp	.+4      	; 0x154 <gpioPinRead+0x26>
	case 3:
		data= (PORTD_PIN & u8_pin);
 150:	90 b3       	in	r25, 0x10	; 16
 152:	96 23       	and	r25, r22
	}
	if(data!=LOW)
	{
		data=HIGH;
	}
	return data;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	91 11       	cpse	r25, r1
 158:	01 c0       	rjmp	.+2      	; 0x15c <gpioPinRead+0x2e>
 15a:	80 e0       	ldi	r24, 0x00	; 0
}
 15c:	81 95       	neg	r24
 15e:	08 95       	ret

00000160 <__vector_10>:


/**************************these ISRs for UART & SPI Challenge****************************/

ISR(TIMER0_COMP_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
	timer0_compare_match_tickes++;
 16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <main>:
#include "UART_SPI_ApplicationMicro2.h"
void spi_transimtter (void);
void spi_reciver (void);
#define  F_CPU 16000000UL
int main (void)
{  Micro_TwoApplication();
 182:	a3 d1       	rcall	.+838    	; 0x4ca <Micro_TwoApplication>
//spi_transimtter();
//spi_reciver();



}
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	08 95       	ret

0000018a <pushButtonInit>:
#include "pushButton.h"
void pushButtonInit(En_buttonId_t en_butotn_id)
{
	switch(en_butotn_id)
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	a9 f0       	breq	.+42     	; 0x1b8 <pushButtonInit+0x2e>
 18e:	28 f4       	brcc	.+10     	; 0x19a <pushButtonInit+0x10>
 190:	88 23       	and	r24, r24
 192:	41 f0       	breq	.+16     	; 0x1a4 <pushButtonInit+0x1a>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	59 f0       	breq	.+22     	; 0x1ae <pushButtonInit+0x24>
 198:	08 95       	ret
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	91 f0       	breq	.+36     	; 0x1c2 <pushButtonInit+0x38>
 19e:	84 30       	cpi	r24, 0x04	; 4
 1a0:	a9 f0       	breq	.+42     	; 0x1cc <pushButtonInit+0x42>
 1a2:	08 95       	ret
	{
		case BTN_0:
			gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	60 e1       	ldi	r22, 0x10	; 16
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	65 cf       	rjmp	.-310    	; 0x76 <gpioPinDirection>
			break;
 1ac:	08 95       	ret
		case BTN_1:
			gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	60 cf       	rjmp	.-320    	; 0x76 <gpioPinDirection>
			break;
 1b6:	08 95       	ret
		case BTN_2:
			gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	5b cf       	rjmp	.-330    	; 0x76 <gpioPinDirection>
			break;
 1c0:	08 95       	ret
		case BTN_3:
			gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	68 e0       	ldi	r22, 0x08	; 8
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	56 cf       	rjmp	.-340    	; 0x76 <gpioPinDirection>
			break;
		case BTN_4_INT0:
			gpioPinDirection(GPIOD, BIT2, INPUT);
 1ca:	08 95       	ret
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	64 e0       	ldi	r22, 0x04	; 4
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	51 cf       	rjmp	.-350    	; 0x76 <gpioPinDirection>
 1d4:	08 95       	ret

000001d6 <pushButtonGetStatus>:
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	unsigned char current_status=0;
	switch(en_butotn_id)
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	09 f4       	brne	.+2      	; 0x1dc <pushButtonGetStatus+0x6>
 1da:	37 c0       	rjmp	.+110    	; 0x24a <pushButtonGetStatus+0x74>
 1dc:	28 f4       	brcc	.+10     	; 0x1e8 <pushButtonGetStatus+0x12>
 1de:	88 23       	and	r24, r24
 1e0:	51 f0       	breq	.+20     	; 0x1f6 <pushButtonGetStatus+0x20>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	e9 f0       	breq	.+58     	; 0x220 <pushButtonGetStatus+0x4a>
 1e6:	6c c0       	rjmp	.+216    	; 0x2c0 <pushButtonGetStatus+0xea>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	09 f4       	brne	.+2      	; 0x1ee <pushButtonGetStatus+0x18>
 1ec:	43 c0       	rjmp	.+134    	; 0x274 <pushButtonGetStatus+0x9e>
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <pushButtonGetStatus+0x1e>
 1f2:	53 c0       	rjmp	.+166    	; 0x29a <pushButtonGetStatus+0xc4>
 1f4:	65 c0       	rjmp	.+202    	; 0x2c0 <pushButtonGetStatus+0xea>
	{
		case BTN_0:
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
 1f6:	60 e1       	ldi	r22, 0x10	; 16
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	99 df       	rcall	.-206    	; 0x12e <gpioPinRead>
 1fc:	88 23       	and	r24, r24
 1fe:	09 f4       	brne	.+2      	; 0x202 <pushButtonGetStatus+0x2c>
 200:	61 c0       	rjmp	.+194    	; 0x2c4 <pushButtonGetStatus+0xee>
			{
				softwareDelayMs(50);
 202:	62 e3       	ldi	r22, 0x32	; 50
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	70 d0       	rcall	.+224    	; 0x2ec <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
 20c:	60 e1       	ldi	r22, 0x10	; 16
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	8e df       	rcall	.-228    	; 0x12e <gpioPinRead>
 212:	88 23       	and	r24, r24
 214:	09 f4       	brne	.+2      	; 0x218 <pushButtonGetStatus+0x42>
 216:	58 c0       	rjmp	.+176    	; 0x2c8 <pushButtonGetStatus+0xf2>
				{
					current_status=gpioPinRead(BTN_0_GPIO, BTN_0_BIT);
 218:	60 e1       	ldi	r22, 0x10	; 16
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	88 cf       	rjmp	.-240    	; 0x12e <gpioPinRead>
 21e:	08 95       	ret
				}
			}
			break;

		case BTN_1:
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	84 df       	rcall	.-248    	; 0x12e <gpioPinRead>
 226:	88 23       	and	r24, r24
 228:	09 f4       	brne	.+2      	; 0x22c <pushButtonGetStatus+0x56>
 22a:	50 c0       	rjmp	.+160    	; 0x2cc <pushButtonGetStatus+0xf6>
			{
				softwareDelayMs(30);
 22c:	6e e1       	ldi	r22, 0x1E	; 30
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	5b d0       	rcall	.+182    	; 0x2ec <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
 236:	64 e0       	ldi	r22, 0x04	; 4
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	79 df       	rcall	.-270    	; 0x12e <gpioPinRead>
 23c:	88 23       	and	r24, r24
 23e:	09 f4       	brne	.+2      	; 0x242 <pushButtonGetStatus+0x6c>
 240:	47 c0       	rjmp	.+142    	; 0x2d0 <pushButtonGetStatus+0xfa>
				{
					current_status=gpioPinRead(BTN_1_GPIO, BTN_1_BIT);
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	73 cf       	rjmp	.-282    	; 0x12e <gpioPinRead>
 248:	08 95       	ret
 24a:	64 e0       	ldi	r22, 0x04	; 4
				}
			}
			break;

		case BTN_2:
			if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	6f df       	rcall	.-290    	; 0x12e <gpioPinRead>
 250:	88 23       	and	r24, r24
 252:	09 f4       	brne	.+2      	; 0x256 <pushButtonGetStatus+0x80>
 254:	3f c0       	rjmp	.+126    	; 0x2d4 <pushButtonGetStatus+0xfe>
			{
				softwareDelayMs(30);
 256:	6e e1       	ldi	r22, 0x1E	; 30
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	46 d0       	rcall	.+140    	; 0x2ec <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_2_GPIO, BTN_2_BIT))
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	64 df       	rcall	.-312    	; 0x12e <gpioPinRead>
 266:	88 23       	and	r24, r24
 268:	09 f4       	brne	.+2      	; 0x26c <pushButtonGetStatus+0x96>
 26a:	36 c0       	rjmp	.+108    	; 0x2d8 <pushButtonGetStatus+0x102>
				{
					current_status=gpioPinRead(BTN_2_GPIO, BTN_2_BIT);
 26c:	64 e0       	ldi	r22, 0x04	; 4
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	5e cf       	rjmp	.-324    	; 0x12e <gpioPinRead>
 272:	08 95       	ret
				}
			}
			break;

		case BTN_3:
			if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
 274:	68 e0       	ldi	r22, 0x08	; 8
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	5a df       	rcall	.-332    	; 0x12e <gpioPinRead>
 27a:	88 23       	and	r24, r24
 27c:	79 f1       	breq	.+94     	; 0x2dc <pushButtonGetStatus+0x106>
			{
				softwareDelayMs(30);
 27e:	6e e1       	ldi	r22, 0x1E	; 30
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	32 d0       	rcall	.+100    	; 0x2ec <softwareDelayMs>
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(BTN_3_GPIO, BTN_3_BIT))
 288:	68 e0       	ldi	r22, 0x08	; 8
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	50 df       	rcall	.-352    	; 0x12e <gpioPinRead>
 28e:	88 23       	and	r24, r24
 290:	39 f1       	breq	.+78     	; 0x2e0 <pushButtonGetStatus+0x10a>
				{
					current_status=gpioPinRead(BTN_3_GPIO, BTN_3_BIT);
 292:	68 e0       	ldi	r22, 0x08	; 8
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	4b cf       	rjmp	.-362    	; 0x12e <gpioPinRead>
 298:	08 95       	ret
				}
			}
			break;

		case BTN_4_INT0:
			if(gpioPinRead(GPIOD, BIT2))
 29a:	64 e0       	ldi	r22, 0x04	; 4
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	47 df       	rcall	.-370    	; 0x12e <gpioPinRead>
 2a0:	88 23       	and	r24, r24
 2a2:	01 f1       	breq	.+64     	; 0x2e4 <pushButtonGetStatus+0x10e>
			{
				softwareDelayMs(30);
 2a4:	6e e1       	ldi	r22, 0x1E	; 30
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	1f d0       	rcall	.+62     	; 0x2ec <softwareDelayMs>
 2ae:	64 e0       	ldi	r22, 0x04	; 4
				/*second check due to switch de-bouncing*/
				if(gpioPinRead(GPIOD, BIT2))
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	3d df       	rcall	.-390    	; 0x12e <gpioPinRead>
 2b4:	88 23       	and	r24, r24
 2b6:	c1 f0       	breq	.+48     	; 0x2e8 <pushButtonGetStatus+0x112>
 2b8:	64 e0       	ldi	r22, 0x04	; 4
 2ba:	83 e0       	ldi	r24, 0x03	; 3
				{
					current_status=gpioPinRead(GPIOD, BIT2);
 2bc:	38 cf       	rjmp	.-400    	; 0x12e <gpioPinRead>
 2be:	08 95       	ret
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
 2c4:	80 e0       	ldi	r24, 0x00	; 0
	}
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	unsigned char current_status=0;
 2c6:	08 95       	ret
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	08 95       	ret
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret

000002ec <softwareDelayMs>:

#include "softwareDelay.h"

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
 2ec:	ab 01       	movw	r20, r22
 2ee:	bc 01       	movw	r22, r24
	
	for (uint16_t counter=0;counter<u32_delay_in_ms;counter++){
 2f0:	41 15       	cp	r20, r1
 2f2:	51 05       	cpc	r21, r1
 2f4:	61 05       	cpc	r22, r1
 2f6:	71 05       	cpc	r23, r1
 2f8:	71 f4       	brne	.+28     	; 0x316 <softwareDelayMs+0x2a>
 2fa:	08 95       	ret
 2fc:	01 97       	sbiw	r24, 0x01	; 1
		for(uint16_t internalcounter=0;internalcounter<1000;internalcounter++){
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <softwareDelayMs+0x10>

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
	
	for (uint16_t counter=0;counter<u32_delay_in_ms;counter++){
 300:	2f 5f       	subi	r18, 0xFF	; 255
 302:	3f 4f       	sbci	r19, 0xFF	; 255
 304:	c9 01       	movw	r24, r18
 306:	a0 e0       	ldi	r26, 0x00	; 0
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	84 17       	cp	r24, r20
 30c:	95 07       	cpc	r25, r21
 30e:	a6 07       	cpc	r26, r22
 310:	b7 07       	cpc	r27, r23
 312:	18 f0       	brcs	.+6      	; 0x31a <softwareDelayMs+0x2e>
 314:	08 95       	ret
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0

#include "softwareDelay.h"

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
 31a:	88 ee       	ldi	r24, 0xE8	; 232
 31c:	93 e0       	ldi	r25, 0x03	; 3
 31e:	ee cf       	rjmp	.-36     	; 0x2fc <softwareDelayMs+0x10>

00000320 <SPI_Init>:
params:pointer to config struct 
return :void 
*******************************************************************/


void SPI_Init(ST_S_SPI_Configuration *spi_Config){
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
        /************************interrputs***************************/
		if(spi_Config->INT_ENABLE==SPI_INT_ON)
 326:	8d 81       	ldd	r24, Y+5	; 0x05
 328:	80 38       	cpi	r24, 0x80	; 128
 32a:	11 f4       	brne	.+4      	; 0x330 <SPI_Init+0x10>
		SPCR|=SPI_INT_ON;
 32c:	6f 9a       	sbi	0x0d, 7	; 13
 32e:	04 c0       	rjmp	.+8      	; 0x338 <SPI_Init+0x18>
		else if(spi_Config->INT_ENABLE==SPI_INT_OFF)
 330:	81 11       	cpse	r24, r1
 332:	02 c0       	rjmp	.+4      	; 0x338 <SPI_Init+0x18>
		SPCR|=SPI_INT_OFF;
 334:	8d b1       	in	r24, 0x0d	; 13
 336:	8d b9       	out	0x0d, r24	; 13
			
	/*******************Data Order******************/
	if (spi_Config->DATA_ORDER == SPI_LSB_FISRT)
 338:	8e 81       	ldd	r24, Y+6	; 0x06
 33a:	80 32       	cpi	r24, 0x20	; 32
 33c:	11 f4       	brne	.+4      	; 0x342 <SPI_Init+0x22>
	SPCR|=SPI_LSB_FISRT;
 33e:	6d 9a       	sbi	0x0d, 5	; 13
 340:	04 c0       	rjmp	.+8      	; 0x34a <SPI_Init+0x2a>
	else if (spi_Config->DATA_ORDER == SPI_MSB_FISRT)
 342:	81 11       	cpse	r24, r1
 344:	02 c0       	rjmp	.+4      	; 0x34a <SPI_Init+0x2a>
	SPCR|=SPI_MSB_FISRT;
 346:	8d b1       	in	r24, 0x0d	; 13
 348:	8d b9       	out	0x0d, r24	; 13
	/********************Master Slave Select ******************/
	if (spi_Config->SLAVE_MODE == SPI_MASTER)
 34a:	88 81       	ld	r24, Y
 34c:	80 31       	cpi	r24, 0x10	; 16
 34e:	71 f5       	brne	.+92     	; 0x3ac <SPI_Init+0x8c>
	{SPCR|=SPI_MASTER;
 350:	6c 9a       	sbi	0x0d, 4	; 13
	/********************SPI pre-scalar in case of master ******************/
		switch(spi_Config->PRESCALAR){
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	49 f0       	breq	.+18     	; 0x36a <SPI_Init+0x4a>
 358:	28 f0       	brcs	.+10     	; 0x364 <SPI_Init+0x44>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	41 f0       	breq	.+16     	; 0x36e <SPI_Init+0x4e>
 35e:	83 30       	cpi	r24, 0x03	; 3
 360:	41 f0       	breq	.+16     	; 0x372 <SPI_Init+0x52>
 362:	0a c0       	rjmp	.+20     	; 0x378 <SPI_Init+0x58>
			case SPI_Fosc4:
			              SPCR|=SPI_Fosc4;
 364:	8d b1       	in	r24, 0x0d	; 13
 366:	8d b9       	out	0x0d, r24	; 13
				          break;
 368:	07 c0       	rjmp	.+14     	; 0x378 <SPI_Init+0x58>
			case  SPI_Fosc16:
			                SPCR|=SPI_Fosc16;
 36a:	68 9a       	sbi	0x0d, 0	; 13
							break;
 36c:	05 c0       	rjmp	.+10     	; 0x378 <SPI_Init+0x58>
			case SPI_Fosc64:
			                SPCR|=SPI_Fosc64;
 36e:	69 9a       	sbi	0x0d, 1	; 13
							break;
 370:	03 c0       	rjmp	.+6      	; 0x378 <SPI_Init+0x58>
			case SPI_Fosc128:
			                SPCR|=SPI_Fosc128;
 372:	8d b1       	in	r24, 0x0d	; 13
 374:	83 60       	ori	r24, 0x03	; 3
 376:	8d b9       	out	0x0d, r24	; 13
			       break;				
							 								   	   
		}
		/********************Double SPI speed if master******************/

		if (spi_Config->DOUBLE_SPEED == SPI_DOUBLE_SPEED_MODE_ON)
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	11 f4       	brne	.+4      	; 0x382 <SPI_Init+0x62>
		SPSR|=SPI_DOUBLE_SPEED_MODE_ON;
 37e:	70 9a       	sbi	0x0e, 0	; 14
 380:	04 c0       	rjmp	.+8      	; 0x38a <SPI_Init+0x6a>
		else if (spi_Config->DOUBLE_SPEED == SPI_DOUBLE_SPEED_MODE_OFF)
 382:	81 11       	cpse	r24, r1
 384:	02 c0       	rjmp	.+4      	; 0x38a <SPI_Init+0x6a>
		SPSR|=SPI_DOUBLE_SPEED_MODE_OFF;
 386:	8e b1       	in	r24, 0x0e	; 14
 388:	8e b9       	out	0x0e, r24	; 14
		/*********************MASTER_Port****************************/
		gpioPinDirection(MISO_PORT,MISO_PIN,INPUT);
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	60 e4       	ldi	r22, 0x40	; 64
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	72 de       	rcall	.-796    	; 0x76 <gpioPinDirection>
		gpioPinDirection(MOSI_PORT,MOSI_PIN,OUTPUT);
 392:	4f ef       	ldi	r20, 0xFF	; 255
 394:	60 e2       	ldi	r22, 0x20	; 32
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	6e de       	rcall	.-804    	; 0x76 <gpioPinDirection>
		gpioPinDirection(SCK_PORT,SCK_PIN,OUTPUT);
 39a:	4f ef       	ldi	r20, 0xFF	; 255
 39c:	60 e8       	ldi	r22, 0x80	; 128
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	6a de       	rcall	.-812    	; 0x76 <gpioPinDirection>
		gpioPinDirection(SS_PORT,SS_PIN,OUTPUT);
 3a2:	4f ef       	ldi	r20, 0xFF	; 255
 3a4:	60 e1       	ldi	r22, 0x10	; 16
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	66 de       	rcall	.-820    	; 0x76 <gpioPinDirection>
 3aa:	14 c0       	rjmp	.+40     	; 0x3d4 <SPI_Init+0xb4>
	}
	else if (spi_Config->SLAVE_MODE == SPI_SLAVE){
 3ac:	81 11       	cpse	r24, r1
 3ae:	12 c0       	rjmp	.+36     	; 0x3d4 <SPI_Init+0xb4>
	SPCR|=SPI_SLAVE;
 3b0:	8d b1       	in	r24, 0x0d	; 13
	/*********************Slave_Port****************************/
	gpioPinDirection(MISO_PORT,MISO_PIN,OUTPUT);
 3b2:	8d b9       	out	0x0d, r24	; 13
 3b4:	4f ef       	ldi	r20, 0xFF	; 255
 3b6:	60 e4       	ldi	r22, 0x40	; 64
 3b8:	81 e0       	ldi	r24, 0x01	; 1
	gpioPinDirection(MOSI_PORT,MOSI_PIN,INPUT);
 3ba:	5d de       	rcall	.-838    	; 0x76 <gpioPinDirection>
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	60 e2       	ldi	r22, 0x20	; 32
 3c0:	81 e0       	ldi	r24, 0x01	; 1
	gpioPinDirection(SCK_PORT,SCK_PIN,INPUT);
 3c2:	59 de       	rcall	.-846    	; 0x76 <gpioPinDirection>
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	60 e8       	ldi	r22, 0x80	; 128
 3c8:	81 e0       	ldi	r24, 0x01	; 1
	gpioPinDirection(SS_PORT,SS_PIN,INPUT);
 3ca:	55 de       	rcall	.-854    	; 0x76 <gpioPinDirection>
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	60 e1       	ldi	r22, 0x10	; 16
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	51 de       	rcall	.-862    	; 0x76 <gpioPinDirection>
	
	}
	/********************clock ploarity******************/
	if (spi_Config->SAMPLING_EDGE == SPI_RISING)
 3d4:	8c 81       	ldd	r24, Y+4	; 0x04
 3d6:	81 11       	cpse	r24, r1
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <SPI_Init+0xc0>
	 SPCR|=SPI_RISING;
 3da:	8d b1       	in	r24, 0x0d	; 13
 3dc:	8d b9       	out	0x0d, r24	; 13
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <SPI_Init+0xc6>
	else if (spi_Config->SAMPLING_EDGE == SPI_FALLING)
 3e0:	88 30       	cpi	r24, 0x08	; 8
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <SPI_Init+0xc6>
	 SPCR|=SPI_FALLING;
 3e4:	6b 9a       	sbi	0x0d, 3	; 13
	/*********************Clock_Phase******************/
	if(spi_Config->clock_phase==leading_EDGE)
 3e6:	8f 81       	ldd	r24, Y+7	; 0x07
 3e8:	81 11       	cpse	r24, r1
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <SPI_Init+0xd2>
	SPCR|=leading_EDGE;
 3ec:	8d b1       	in	r24, 0x0d	; 13
 3ee:	8d b9       	out	0x0d, r24	; 13
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <SPI_Init+0xd8>
	else if(spi_Config->clock_phase==trailing_EDGE)
 3f2:	84 30       	cpi	r24, 0x04	; 4
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <SPI_Init+0xd8>
	SPCR|=trailing_EDGE;
 3f6:	6a 9a       	sbi	0x0d, 2	; 13
	/********************Enable SPI ******************/
	if (spi_Config->ENABLE == SPI_ENABLE_ON)
 3f8:	8a 81       	ldd	r24, Y+2	; 0x02
 3fa:	80 34       	cpi	r24, 0x40	; 64
 3fc:	11 f4       	brne	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	SPCR|=SPI_ENABLE_ON;
 3fe:	6e 9a       	sbi	0x0d, 6	; 13
 400:	04 c0       	rjmp	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	else if (spi_Config->ENABLE == SPI_ENABLE_OFF)
 402:	81 11       	cpse	r24, r1
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	SPCR|=SPI_ENABLE_OFF;
 406:	8d b1       	in	r24, 0x0d	; 13
 408:	8d b9       	out	0x0d, r24	; 13
	
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <SPI_Transceiver>:
params: data wants to transfer
return :data  Received
*******************************************************************/


uint8_t  SPI_Transceiver(uint8_t Copy_u8Data){
 410:	cf 93       	push	r28
 412:	c8 2f       	mov	r28, r24
	gpioPinWrite(SS_PORT,SS_PIN,LOW);
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	60 e1       	ldi	r22, 0x10	; 16
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	61 de       	rcall	.-830    	; 0xde <gpioPinWrite>
	SPDR = Copy_u8Data; //send data
 41c:	cf b9       	out	0x0f, r28	; 15
	
	while(!(SPSR & (1<<SPIF)));
 41e:	77 9b       	sbis	0x0e, 7	; 14
 420:	fe cf       	rjmp	.-4      	; 0x41e <SPI_Transceiver+0xe>
	
	//SPSR|=(1<<SPIF);
	return SPDR ; // Received data
 422:	8f b1       	in	r24, 0x0f	; 15
}
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <timer0Init>:
* Return value: None
* Description:this function sets the timer clock without prescaller
* ***********************************************************************/
void timer0Start(void)
{
	TCCR0 = T0_PRESCALER_NO;
 428:	ef 92       	push	r14
 42a:	0f 93       	push	r16
 42c:	88 23       	and	r24, r24
 42e:	19 f0       	breq	.+6      	; 0x436 <timer0Init+0xe>
 430:	88 30       	cpi	r24, 0x08	; 8
 432:	41 f0       	breq	.+16     	; 0x444 <timer0Init+0x1c>
 434:	0d c0       	rjmp	.+26     	; 0x450 <timer0Init+0x28>
 436:	22 bf       	out	0x32, r18	; 50
 438:	e9 be       	out	0x39, r14	; 57
 43a:	0c bf       	out	0x3c, r16	; 60
 43c:	60 68       	ori	r22, 0x80	; 128
 43e:	46 2b       	or	r20, r22
 440:	43 bf       	out	0x33, r20	; 51
 442:	06 c0       	rjmp	.+12     	; 0x450 <timer0Init+0x28>
 444:	22 bf       	out	0x32, r18	; 50
 446:	0c bf       	out	0x3c, r16	; 60
 448:	e9 be       	out	0x39, r14	; 57
 44a:	60 68       	ori	r22, 0x80	; 128
 44c:	46 2b       	or	r20, r22
 44e:	43 bf       	out	0x33, r20	; 51
 450:	0f 91       	pop	r16
 452:	ef 90       	pop	r14
 454:	08 95       	ret

00000456 <timer0Stop>:
* Return value: None
* Description:this function stops timer0 by stopping the timer clock
* ***********************************************************************/
void timer0Stop(void)
{
	TCCR0 = T0_NO_CLOCK;
 456:	13 be       	out	0x33, r1	; 51
 458:	08 95       	ret

0000045a <UART_init>:
//static UART_Config_Structure * UART_Init_Structure = NULL_PTR;


/********************************Functions Definitions***********************************/
void UART_init(const UART_Config_Structure * UART_Init_Structure)
{
 45a:	fc 01       	movw	r30, r24
	/****************************UCSRA Description************************
	 * U2X => double transmission speed
	 * MPCM =>Multi processor communication
	 *********************************************************************/

	UCSRA = UART_Init_Structure->Speed_Mode | UART_Init_Structure->Multi_Processor_Comm_Mode;
 45c:	94 85       	ldd	r25, Z+12	; 0x0c
 45e:	85 85       	ldd	r24, Z+13	; 0x0d
 460:	89 2b       	or	r24, r25
 462:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  => Transmitter Enable
	 * UCSZ2 => 9-bit data mode... bit number nine used as identify the frame as data frame or address frame
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/

	UCSRB = UART_Init_Structure->Receive_Complete_Inter | UART_Init_Structure->Transmit_Complete_Inter |
 464:	95 81       	ldd	r25, Z+5	; 0x05
 466:	86 81       	ldd	r24, Z+6	; 0x06
 468:	89 2b       	or	r24, r25
 46a:	97 81       	ldd	r25, Z+7	; 0x07
 46c:	89 2b       	or	r24, r25
 46e:	90 85       	ldd	r25, Z+8	; 0x08
 470:	89 2b       	or	r24, r25
 472:	91 85       	ldd	r25, Z+9	; 0x09
 474:	89 2b       	or	r24, r25
 476:	92 85       	ldd	r25, Z+10	; 0x0a
 478:	89 2b       	or	r24, r25
 47a:	93 85       	ldd	r25, Z+11	; 0x0b
 47c:	89 2b       	or	r24, r25
 47e:	8a b9       	out	0x0a, r24	; 10
	 * USBS    => stop bit mode
	 * UCSZ1:0 => data mode
	 * UCPOL   => Clk Polarity... Used with the Synchronous operation only
	 ***********************************************************************/

	UCSRC_Value = (1<<URSEL) | UART_Init_Structure->Synch_Mode | UART_Init_Structure->Parity_Mode |
 480:	90 81       	ld	r25, Z
 482:	81 81       	ldd	r24, Z+1	; 0x01
 484:	89 2b       	or	r24, r25
 486:	80 68       	ori	r24, 0x80	; 128
 488:	92 81       	ldd	r25, Z+2	; 0x02
 48a:	89 2b       	or	r24, r25
 48c:	93 81       	ldd	r25, Z+3	; 0x03
 48e:	89 2b       	or	r24, r25
 490:	94 81       	ldd	r25, Z+4	; 0x04
 492:	89 2b       	or	r24, r25
			UART_Init_Structure->Stop_Bit_Mode | UART_Init_Structure->Clk_Polarity_Mode |
			UART_Init_Structure->Char_Size;


	UCSRC = UCSRC_Value;
 494:	80 bd       	out	0x20, r24	; 32
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	//UBRRH_Value = (0X0F) & (UART_Init_Structure->Double_Speed_Baud_Rate>>8);
	//UBRRH = UBRRH_Value;
	UBRRH = (UART_Init_Structure->Double_Speed_Baud_Rate>>8);
 496:	87 85       	ldd	r24, Z+15	; 0x0f
 498:	80 bd       	out	0x20, r24	; 32
	UBRRL = UART_Init_Structure->Double_Speed_Baud_Rate;
 49a:	86 85       	ldd	r24, Z+14	; 0x0e
 49c:	89 b9       	out	0x09, r24	; 9
 49e:	08 95       	ret

000004a0 <UART_sendByte>:

void UART_sendByte(const uint8_t data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 4a0:	5d 9b       	sbis	0x0b, 5	; 11
 4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
 4a4:	8c b9       	out	0x0c, r24	; 12
 4a6:	08 95       	ret

000004a8 <__vector_3>:
		}*/
		SPI_Transceiver(speed);
		softwareDelayMs(1000);
	}
}
ISR(INT2_vect){
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	8f 93       	push	r24
	speed--;
 4b4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <speed>
 4b8:	81 50       	subi	r24, 0x01	; 1
 4ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <speed>
 4be:	8f 91       	pop	r24
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <Micro_TwoApplication>:


#include "UART_SPI_ApplicationMicro2.h"

void Micro_TwoApplication(void)
{
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
 4d2:	68 97       	sbiw	r28, 0x18	; 24
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	cd bf       	out	0x3d, r28	; 61
	
	sei();
 4de:	78 94       	sei
	uint8_t speed=0;
	uint8_t distance=0;
	//uint8_t total_distance;
	//uint8_t timer_tickes=0;
	UART_Config_Structure uart_initialization_structure;
	uart_initialization_structure.Char_Size=USART_8_Bit_CHAR;
 4e0:	86 e0       	ldi	r24, 0x06	; 6
 4e2:	8d 83       	std	Y+5, r24	; 0x05
	uart_initialization_structure.Clk_Polarity_Mode=TX_RISING_RX_FALLING;
 4e4:	1c 82       	std	Y+4, r1	; 0x04
	uart_initialization_structure.Speed_Mode=USART_DOUBLE_SPEED;
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	8d 87       	std	Y+13, r24	; 0x0d
	uart_initialization_structure.Parity_Mode=USART_NO_PARITY;
 4ea:	1a 82       	std	Y+2, r1	; 0x02
	uart_initialization_structure.Stop_Bit_Mode=USART_1_STOPBIT;
 4ec:	1b 82       	std	Y+3, r1	; 0x03
	uart_initialization_structure.Receive_Mode=USART_RECIEVE_ENABLE;
 4ee:	80 e1       	ldi	r24, 0x10	; 16
 4f0:	89 87       	std	Y+9, r24	; 0x09
	uart_initialization_structure.Transmit_Mode=USART_TRANSMIT_ENABLE;
 4f2:	88 e0       	ldi	r24, 0x08	; 8
 4f4:	8a 87       	std	Y+10, r24	; 0x0a
	uart_initialization_structure.Double_Speed_Baud_Rate=BAUD9600;
 4f6:	8f ec       	ldi	r24, 0xCF	; 207
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	98 8b       	std	Y+16, r25	; 0x10
 4fc:	8f 87       	std	Y+15, r24	; 0x0f
	UART_init(&uart_initialization_structure);
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	ab df       	rcall	.-170    	; 0x45a <UART_init>

	ST_S_SPI_Configuration spistr1=
	{
		 spistr1.SLAVE_MODE=SPI_SLAVE,
 504:	19 8a       	std	Y+17, r1	; 0x11
		 spistr1.INT_ENABLE=SPI_INT_OFF,
 506:	1e 8a       	std	Y+22, r1	; 0x16
		 spistr1.PRESCALAR=SPI_Fosc16,
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	8a 8b       	std	Y+18, r24	; 0x12
		 spistr1.DOUBLE_SPEED=SPI_DOUBLE_SPEED_MODE_OFF,
 50c:	1c 8a       	std	Y+20, r1	; 0x14
		 spistr1.ENABLE=SPI_ENABLE_ON,
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	8b 8b       	std	Y+19, r24	; 0x13
		 spistr1.SAMPLING_EDGE=SPI_RISING,
 512:	1d 8a       	std	Y+21, r1	; 0x15
		 spistr1.DATA_ORDER=SPI_LSB_FISRT,
 514:	80 e2       	ldi	r24, 0x20	; 32
 516:	8f 8b       	std	Y+23, r24	; 0x17
		 spistr1.clock_phase=leading_EDGE
 518:	18 8e       	std	Y+24, r1	; 0x18
	 };
	SPI_Init(&spistr1);
 51a:	ce 01       	movw	r24, r28
 51c:	41 96       	adiw	r24, 0x11	; 17
 51e:	00 df       	rcall	.-512    	; 0x320 <SPI_Init>

	pushButtonInit(BTN_0);
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	33 de       	rcall	.-922    	; 0x18a <pushButtonInit>
	pushButtonInit(BTN_1);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	31 de       	rcall	.-926    	; 0x18a <pushButtonInit>
 528:	10 e0       	ldi	r17, 0x00	; 0

void Micro_TwoApplication(void)
{
	
	sei();
	uint8_t speed=0;
 52a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
	pushButtonInit(BTN_0);
	pushButtonInit(BTN_1);
	while(1)
	{			

		if(timer0_compare_match_tickes%4==0)
 52e:	83 70       	andi	r24, 0x03	; 3
 530:	11 f4       	brne	.+4      	; 0x536 <Micro_TwoApplication+0x6c>
		{
			speed=SPI_Transceiver(0);
 532:	6e df       	rcall	.-292    	; 0x410 <SPI_Transceiver>
 534:	18 2f       	mov	r17, r24
 536:	80 e0       	ldi	r24, 0x00	; 0
			//speed-=48;
			//distance+=speed;
		}
		if(pushButtonGetStatus(BTN_0))
 538:	4e de       	rcall	.-868    	; 0x1d6 <pushButtonGetStatus>
 53a:	88 23       	and	r24, r24
 53c:	49 f0       	breq	.+18     	; 0x550 <Micro_TwoApplication+0x86>
 53e:	68 94       	set
 540:	ee 24       	eor	r14, r14
		{
			timer0Init(T0_COMP_MODE,T0_OC0_DIS,T0_PRESCALER_64,0,250,T0_INTERRUPT_CMP);
 542:	e1 f8       	bld	r14, 1
 544:	0a ef       	ldi	r16, 0xFA	; 250
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	43 e0       	ldi	r20, 0x03	; 3
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	88 e0       	ldi	r24, 0x08	; 8
 54e:	6c df       	rcall	.-296    	; 0x428 <timer0Init>
			distance=0;
		}
	
		if(pushButtonGetStatus(BTN_1))
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	41 de       	rcall	.-894    	; 0x1d6 <pushButtonGetStatus>
 554:	88 23       	and	r24, r24
 556:	49 f3       	breq	.-46     	; 0x52a <Micro_TwoApplication+0x60>
 558:	7e df       	rcall	.-260    	; 0x456 <timer0Stop>
		{
			//timer_tickes=timer0Read();
			timer0Stop();
 55a:	81 2f       	mov	r24, r17
 55c:	a1 df       	rcall	.-190    	; 0x4a0 <UART_sendByte>
			distance+=48;
			UART_sendByte(speed);
 55e:	e5 cf       	rjmp	.-54     	; 0x52a <Micro_TwoApplication+0x60>

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
